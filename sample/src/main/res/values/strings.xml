<resources>
    <string name="app_name">Secure Web View Sample</string>
    <string name="hello_blank_fragment">Hello blank fragment</string>
    <string name="navigation_drawer_open">Open Menu</string>
    <string name="navigation_drawer_closed">Close Menu</string>
    <string name="secure_webview">Secure Webview</string>
    <string name="info">Info</string>
    <string name="url">URL</string>
    <string name="load_url">Load URL</string>
    <string name="breakout">Breakout</string>
    <string name="clear_text_traffic">Clear Text Traffic</string>
    <string name="file_access">File Access</string>
    <string name="content_provider_access">Content Provider Access</string>
    <string name="opaque_origin">Opaque Origin</string>
    <string name="javascript_evaluation">JavaScript Evaluation</string>

    <string name="breakout_demo">Breakout demo</string>
    <string name="breakout_demo_description">This example demonstrates one of the most common, interactive (a WebView that is shown on UI and can be interacted with by the user) WebView issues: breakout.\n\nThis semi-realistic example displays a Google Maps in a WebView, it is only intended to show just that and not any webpage (notice that there is no URL entry). However you can pretty easily navigate to Google.com main page (try Help in the hamburger menu and then Terms, lastyly, the Google logo in the terms page\'s hamburger menu).\n\nFrom there, you can pretty much open any webpage.\n\nIf you enable SecureWebView, it does not let you navigate outside of the intended pages by using an allow list.</string>

    <string name="clear_text_traffic_demo">Clear Text Traffic demo</string>
    <string name="clear_text_traffic_demo_description">It is not a widely known fact that Android versions prior to 8 (Oreo) does not respect the network security config or the android:usesCleartextTraffic Manifest flag and allow loading Clear Text (HTTP) URLs even if they should be disallowed. You can go ahead and try this by setting both the android:usesCleartextTraffic flag in the Manifest of this project and the cleartextTrafficPermitted property for the base-config tag in res/xml/networsk_security_config.xml to false (they are set to true meaning clear text (HTTP) traffic is enabled for the app for demonstration purposes).\n\nThis will result in the app itself not permitted to communicate via HTTP but the "normal" WebView in this example will still load HTTP sites.\n\nBut even on newer Android versions, it is possible (although not recommended) that the app itself needs to be able to load HTTP URLs but a WebView in it should not.\n\nFor these reasons, SecureWebView refuses to load HTTP URLs as you can try with this example by enabling it.</string>

    <string name="file_access_demo">File Access demo</string>
    <string name="file_access_demo_description">It is a somewhat little known fact that WebView lets users open a file via a URI with the \"file://\" scheme on Android 9.0 and below by default. Since Android 10 this has been turned off by default and developers need to opt-in for this (for demonstrative purposes in this demo this has been done), but that can still done in the code accidentally (e.g. left in after debugging).\n\nPlease note that since Android 11, due to Scoped Storage enforcement you can only access media file (images, audio, etc.) this way (even for Android 10, you need to opt-out of Scoped Storage, but you cannot do that on Android 11 and above).\n\nTo try it, copy the android_robot.png from the asset folder of the project to the Download folder of the device this sample runs on, or simply use the URL bar to open a file that exists on that device (on Android 11 or above, you should use an image "media" file).\n\nPlease note that on Android 6 or newer, the app will ask for permission to access files on the device. You should grant it or the sample won\'t work and the case when you deny it is not fully implemented so if you denied the permission by accident, uninstall and re-install the sample so you can grant it).\n\nAfter that, you can see that the same does not work if you enable SecureWebView, which has this turned off by default, even on older Android versions\n\nNote that assets and resources will be still accessible via file:///android_asset and file:///android_res, this is by design)..</string>

    <string name="content_provider_access_demo">Content Provider Access demo</string>
    <string name="content_provider_access_demo_description">It is a somewhat little known fact that WebView lets users query a Content Provider of the app via URIs defined for that Provider.\n\nThis is enabled by default on all current Android versions and developers need to explicitly opt-out of it if they don\'t want this behavior..\n\nGo ahead and try querying file://example.txt and see that it does not work if you enable SecureWebView, which has Content Provider access turned off by default.</string>

    <string name="opaque_origin_demo">Opaque Origin demo</string>
    <string name="opaque_origin_demo_description">Apps need to display local web content sometimes and in order to do that, developers often use the very old loadData method of WebView. The problem is that it won\'t let you correctly set the BASE URL so Same Origin Checks will fail (e.g. if you try to fetch a real web page).\n\nThe "popular solution" to such issues is often disabling these Same Origin Checks, even though a simpler and much better approach is available in form of a newer method: loadDataWithBaseUrl. This accepts almost any encoding (including UTF-8) and it has a parameter for a Base URL letting Same Origin Checks succeed if a correct URL is provided (e.g. the original URL of the displayed content or the domain of the app developer).\n\nThis is why you get the error "Failed to fetch" in this example when using the standard WebView.\n\nSecureWebView only provides the newer method so you cannot use the wrong method by mistake and if you set the correct BASE URL Same Origin Checks will succeed, hence if you turn on SecureWebView in the demo, you should get a 200 OK response for the fetch call.</string>

    <string name="javascript_evaluation_demo">JavaScript evaluation demo</string>
    <string name="javascript_evaluation_demo_description">JavaScript evaluation should be done with care in WebView, so it\'s not a surprise that the IDE displays a warning when you enable running JavaScript.\n\nBy default, the loadUrl method of a WebView can run JavaScript via either the javascript or data URI schemes, however it\'s much better to use the dedicated evaluateJavascript method. For this reason, SecureWebView disallows these URI schemes.\n\nYou can try it with the JavaScript already put into the URL field, or by copying and pasting a data URI, e.g.:\n\ndata:text/html,&lt;script&gt;alert(\'Hi\');&lt;/script&gt;\n\nIf you enable SecureWebView, none of them works (evaluateJavascript does).</string>

</resources>
